{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8898f7e7",
   "metadata": {},
   "source": [
    "This project aims to create a data lake solution to analyze the trend in human development indicators in Saint Kitts and Nevis over time. The data lake will be built using the data from https://data.world/hdro/663862f6-ca08-4957-8b5e-51471cedd04f/workspace/file?filename=human-development-indicators-for-saint-kitts-and-nevis-1.csv\n",
    "\n",
    "The Analysis Question being looked at is : What is the overall trend in human development indicators for saint kitts and Nevis? \n",
    "\n",
    "Data Wrangling For Data prepration and exploration, the following packages will be useful:\n",
    "\n",
    "Pandas: For loading, cleaning, and manipulating data.\n",
    "\n",
    "Numpy: For mathematical and scientific computing.\n",
    "\n",
    "Matplotlib: for visulaizing data and creating graphs and charts\n",
    "\n",
    "Seaborn : For creating more advanced visulization and charts\n",
    "\n",
    "Sckit-learn : For machine learning and data analysis.\n",
    "\n",
    "Import Dataset Human development indicators for Saint Kitts and Nevis\n",
    "\n",
    "Import Packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "91defec0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from pandas.plotting import scatter_matrix\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a34a3b7f",
   "metadata": {},
   "source": [
    "Import Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "59c78d56",
   "metadata": {},
   "outputs": [],
   "source": [
    "human_indicators = pd.read_csv(\"C:/Users/admin/Desktop/Entity/Final Project/human-development-indicators-for-saint-kitts-and-nevis-1 (1).csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2afbbb12",
   "metadata": {},
   "source": [
    "Take a look at the data to observe the structure and get familiar with the contents. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "0b5e66dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 538 entries, 0 to 537\n",
      "Data columns (total 6 columns):\n",
      " #   Column                Non-Null Count  Dtype  \n",
      "---  ------                --------------  -----  \n",
      " 0   #country+code         538 non-null    object \n",
      " 1   #country+name         538 non-null    object \n",
      " 2   #indicator+code       538 non-null    int64  \n",
      " 3   #indicator+name       538 non-null    object \n",
      " 4   #indicator+value+num  538 non-null    float64\n",
      " 5   #date+year            538 non-null    int64  \n",
      "dtypes: float64(1), int64(2), object(3)\n",
      "memory usage: 25.3+ KB\n"
     ]
    }
   ],
   "source": [
    "human_indicators.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04c3dec5",
   "metadata": {},
   "source": [
    "Double Check the data was uploaded correctly as a dataframe. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "600c82ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n"
     ]
    }
   ],
   "source": [
    "print(type(human_indicators))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "adc3ebc0",
   "metadata": {},
   "source": [
    "It is a DataFrame\n",
    "\n",
    "Create a function using the 'def' keyword. The function retruns the dataframe when called. The fucntion can be pulled multiple times to retrieve information in the dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "aa30fc10",
   "metadata": {},
   "outputs": [],
   "source": [
    "def human_indicators_function():\n",
    "    return human_indicators"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2899571",
   "metadata": {},
   "source": [
    "Call the function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "34975fec",
   "metadata": {},
   "outputs": [],
   "source": [
    "result = human_indicators_function()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23a9dfce",
   "metadata": {},
   "source": [
    "Print the results to make sure that was succesful"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "5e53dbde",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    #country+code          #country+name  #indicator+code  \\\n",
      "0             KNA  Saint Kitts and Nevis            21806   \n",
      "1             KNA  Saint Kitts and Nevis            31706   \n",
      "2             KNA  Saint Kitts and Nevis            44206   \n",
      "3             KNA  Saint Kitts and Nevis            45106   \n",
      "4             KNA  Saint Kitts and Nevis            52606   \n",
      "..            ...                    ...              ...   \n",
      "533           KNA  Saint Kitts and Nevis           163906   \n",
      "534           KNA  Saint Kitts and Nevis           174306   \n",
      "535           KNA  Saint Kitts and Nevis           174406   \n",
      "536           KNA  Saint Kitts and Nevis           175206   \n",
      "537           KNA  Saint Kitts and Nevis           181706   \n",
      "\n",
      "                                       #indicator+name  #indicator+value+num  \\\n",
      "0            Refugees by country of origin (thousands)              0.050000   \n",
      "1       Share of seats in parliament (% held by women)             13.333333   \n",
      "2                          Total population (millions)              0.055345   \n",
      "3                                 Urban population (%)             30.800000   \n",
      "4                      Remittances, inflows (% of GDP)              1.124040   \n",
      "..                                                 ...                   ...   \n",
      "533  Renewable energy consumption (% of total final...             40.032326   \n",
      "534  Fossil fuel energy consumption (% of total ene...              0.000000   \n",
      "535  Carbon dioxide emissions (kg per 2011 PPP $ of...              0.181784   \n",
      "536    Antenatal care coverage, at least one visit (%)            100.000000   \n",
      "537    Rural population with access to electricity (%)             82.082064   \n",
      "\n",
      "     #date+year  \n",
      "0          2017  \n",
      "1          2017  \n",
      "2          2017  \n",
      "3          2017  \n",
      "4          2017  \n",
      "..          ...  \n",
      "533        1990  \n",
      "534        1990  \n",
      "535        1990  \n",
      "536        1990  \n",
      "537        1990  \n",
      "\n",
      "[538 rows x 6 columns]\n"
     ]
    }
   ],
   "source": [
    "print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26d82c3c",
   "metadata": {},
   "source": [
    "Check for Missing values\n",
    "\n",
    "The 'isna' method is used to check for missing values in the dataframe. The result is a datframe with the same shape as the original data frame, where each element is 'True' if the corresponding value in teh original dataframe is missing, and 'False' otherwise.\n",
    "\n",
    "the 'sum' method is then used to count the number of missing values in each column. The result is a series with the number of missing values for each column.\n",
    "\n",
    "Call the function to retrieve the data frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "069956a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "human_indicators1 =human_indicators_function()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9692bd20",
   "metadata": {},
   "source": [
    "Check for Missing Vlaues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "8aaa3418",
   "metadata": {},
   "outputs": [],
   "source": [
    "missing_values = human_indicators1 = human_indicators.isna()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fb5c8dc",
   "metadata": {},
   "source": [
    "Take a look to make sure it was successful.\n",
    "\n",
    "Print the Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "748d10e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#country+code           0\n",
      "#country+name           0\n",
      "#indicator+code         0\n",
      "#indicator+name         0\n",
      "#indicator+value+num    0\n",
      "#date+year              0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(missing_values.sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "240391b6",
   "metadata": {},
   "source": [
    "There are no missing results.\n",
    "\n",
    "Continue with Wrangling.\n",
    "\n",
    "Rename Columns then check it was done succesfully"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "3959d5ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "human_indicators.rename(columns={'#indicator+value+num':'human_indicator_value',\n",
    "                                         '#country+name':'country_name',\n",
    "                                         '#indicator+code':'human_indicator_code',\n",
    "                                         '#indicator+name':'human_indicator_name',\n",
    "                                         '#date+year':'year'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "9950411b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>#country+code</th>\n",
       "      <th>country_name</th>\n",
       "      <th>human_indicator_code</th>\n",
       "      <th>human_indicator_name</th>\n",
       "      <th>human_indicator_value</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>KNA</td>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>21806</td>\n",
       "      <td>Refugees by country of origin (thousands)</td>\n",
       "      <td>0.050000</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>KNA</td>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>31706</td>\n",
       "      <td>Share of seats in parliament (% held by women)</td>\n",
       "      <td>13.333333</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>KNA</td>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>44206</td>\n",
       "      <td>Total population (millions)</td>\n",
       "      <td>0.055345</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>KNA</td>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>45106</td>\n",
       "      <td>Urban population (%)</td>\n",
       "      <td>30.800000</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>KNA</td>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>52606</td>\n",
       "      <td>Remittances, inflows (% of GDP)</td>\n",
       "      <td>1.124040</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>533</th>\n",
       "      <td>KNA</td>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>163906</td>\n",
       "      <td>Renewable energy consumption (% of total final...</td>\n",
       "      <td>40.032326</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>534</th>\n",
       "      <td>KNA</td>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>174306</td>\n",
       "      <td>Fossil fuel energy consumption (% of total ene...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>535</th>\n",
       "      <td>KNA</td>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>174406</td>\n",
       "      <td>Carbon dioxide emissions (kg per 2011 PPP $ of...</td>\n",
       "      <td>0.181784</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>536</th>\n",
       "      <td>KNA</td>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>175206</td>\n",
       "      <td>Antenatal care coverage, at least one visit (%)</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>537</th>\n",
       "      <td>KNA</td>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>181706</td>\n",
       "      <td>Rural population with access to electricity (%)</td>\n",
       "      <td>82.082064</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>538 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    #country+code           country_name  human_indicator_code  \\\n",
       "0             KNA  Saint Kitts and Nevis                 21806   \n",
       "1             KNA  Saint Kitts and Nevis                 31706   \n",
       "2             KNA  Saint Kitts and Nevis                 44206   \n",
       "3             KNA  Saint Kitts and Nevis                 45106   \n",
       "4             KNA  Saint Kitts and Nevis                 52606   \n",
       "..            ...                    ...                   ...   \n",
       "533           KNA  Saint Kitts and Nevis                163906   \n",
       "534           KNA  Saint Kitts and Nevis                174306   \n",
       "535           KNA  Saint Kitts and Nevis                174406   \n",
       "536           KNA  Saint Kitts and Nevis                175206   \n",
       "537           KNA  Saint Kitts and Nevis                181706   \n",
       "\n",
       "                                  human_indicator_name  human_indicator_value  \\\n",
       "0            Refugees by country of origin (thousands)               0.050000   \n",
       "1       Share of seats in parliament (% held by women)              13.333333   \n",
       "2                          Total population (millions)               0.055345   \n",
       "3                                 Urban population (%)              30.800000   \n",
       "4                      Remittances, inflows (% of GDP)               1.124040   \n",
       "..                                                 ...                    ...   \n",
       "533  Renewable energy consumption (% of total final...              40.032326   \n",
       "534  Fossil fuel energy consumption (% of total ene...               0.000000   \n",
       "535  Carbon dioxide emissions (kg per 2011 PPP $ of...               0.181784   \n",
       "536    Antenatal care coverage, at least one visit (%)             100.000000   \n",
       "537    Rural population with access to electricity (%)              82.082064   \n",
       "\n",
       "     year  \n",
       "0    2017  \n",
       "1    2017  \n",
       "2    2017  \n",
       "3    2017  \n",
       "4    2017  \n",
       "..    ...  \n",
       "533  1990  \n",
       "534  1990  \n",
       "535  1990  \n",
       "536  1990  \n",
       "537  1990  \n",
       "\n",
       "[538 rows x 6 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(human_indicators)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5499e9ac",
   "metadata": {},
   "source": [
    "All looks as it should.\n",
    "\n",
    "Subset the data.\n",
    "\n",
    "Remove information that I will not be using.\n",
    "\n",
    "Drop the single column 'country+code' that I will not be using"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "b774971a",
   "metadata": {},
   "outputs": [],
   "source": [
    "human_indicators_modified = human_indicators.drop(\"#country+code\",axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb63f87b",
   "metadata": {},
   "source": [
    "At every step take a quick look at the data to ensure your code is successful. It helps to identify errors early so they can be corrected. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "88da4b4b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country_name</th>\n",
       "      <th>human_indicator_code</th>\n",
       "      <th>human_indicator_name</th>\n",
       "      <th>human_indicator_value</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>21806</td>\n",
       "      <td>Refugees by country of origin (thousands)</td>\n",
       "      <td>0.050000</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>31706</td>\n",
       "      <td>Share of seats in parliament (% held by women)</td>\n",
       "      <td>13.333333</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>44206</td>\n",
       "      <td>Total population (millions)</td>\n",
       "      <td>0.055345</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>45106</td>\n",
       "      <td>Urban population (%)</td>\n",
       "      <td>30.800000</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>52606</td>\n",
       "      <td>Remittances, inflows (% of GDP)</td>\n",
       "      <td>1.124040</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>533</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>163906</td>\n",
       "      <td>Renewable energy consumption (% of total final...</td>\n",
       "      <td>40.032326</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>534</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>174306</td>\n",
       "      <td>Fossil fuel energy consumption (% of total ene...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>535</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>174406</td>\n",
       "      <td>Carbon dioxide emissions (kg per 2011 PPP $ of...</td>\n",
       "      <td>0.181784</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>536</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>175206</td>\n",
       "      <td>Antenatal care coverage, at least one visit (%)</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>537</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>181706</td>\n",
       "      <td>Rural population with access to electricity (%)</td>\n",
       "      <td>82.082064</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>538 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              country_name  human_indicator_code  \\\n",
       "0    Saint Kitts and Nevis                 21806   \n",
       "1    Saint Kitts and Nevis                 31706   \n",
       "2    Saint Kitts and Nevis                 44206   \n",
       "3    Saint Kitts and Nevis                 45106   \n",
       "4    Saint Kitts and Nevis                 52606   \n",
       "..                     ...                   ...   \n",
       "533  Saint Kitts and Nevis                163906   \n",
       "534  Saint Kitts and Nevis                174306   \n",
       "535  Saint Kitts and Nevis                174406   \n",
       "536  Saint Kitts and Nevis                175206   \n",
       "537  Saint Kitts and Nevis                181706   \n",
       "\n",
       "                                  human_indicator_name  human_indicator_value  \\\n",
       "0            Refugees by country of origin (thousands)               0.050000   \n",
       "1       Share of seats in parliament (% held by women)              13.333333   \n",
       "2                          Total population (millions)               0.055345   \n",
       "3                                 Urban population (%)              30.800000   \n",
       "4                      Remittances, inflows (% of GDP)               1.124040   \n",
       "..                                                 ...                    ...   \n",
       "533  Renewable energy consumption (% of total final...              40.032326   \n",
       "534  Fossil fuel energy consumption (% of total ene...               0.000000   \n",
       "535  Carbon dioxide emissions (kg per 2011 PPP $ of...               0.181784   \n",
       "536    Antenatal care coverage, at least one visit (%)             100.000000   \n",
       "537    Rural population with access to electricity (%)              82.082064   \n",
       "\n",
       "     year  \n",
       "0    2017  \n",
       "1    2017  \n",
       "2    2017  \n",
       "3    2017  \n",
       "4    2017  \n",
       "..    ...  \n",
       "533  1990  \n",
       "534  1990  \n",
       "535  1990  \n",
       "536  1990  \n",
       "537  1990  \n",
       "\n",
       "[538 rows x 5 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(human_indicators_modified)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d76e0f0",
   "metadata": {},
   "source": [
    "All looks as is expected\n",
    "\n",
    "Keep the rows I will use.\n",
    "\n",
    "I will create a list of the rows I wish to keep. The 'isin' method is used to check if each value in the column is in the list. The result will be a new dataframe that only contains the rows where the values in the column are in the list.\n",
    "\n",
    "Create a list of rows I wish to keep."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "81db625e",
   "metadata": {},
   "outputs": [],
   "source": [
    "keep_list = [\"Human Development Index (HDI)\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "1a52563e",
   "metadata": {},
   "outputs": [],
   "source": [
    "human_indicators2=human_indicators_modified[human_indicators_modified[\"human_indicator_name\"].isin(keep_list)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2b4e81a",
   "metadata": {},
   "source": [
    "Take a quick look at the data to ensure it was successful"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "f5db44a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country_name</th>\n",
       "      <th>human_indicator_code</th>\n",
       "      <th>human_indicator_name</th>\n",
       "      <th>human_indicator_value</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>Human Development Index (HDI)</td>\n",
       "      <td>0.777845</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>Human Development Index (HDI)</td>\n",
       "      <td>0.774242</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>Human Development Index (HDI)</td>\n",
       "      <td>0.772708</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>Human Development Index (HDI)</td>\n",
       "      <td>0.770395</td>\n",
       "      <td>2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>Human Development Index (HDI)</td>\n",
       "      <td>0.763297</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>Human Development Index (HDI)</td>\n",
       "      <td>0.755679</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>245</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>Human Development Index (HDI)</td>\n",
       "      <td>0.750983</td>\n",
       "      <td>2011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>285</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>Human Development Index (HDI)</td>\n",
       "      <td>0.745055</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>304</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>Human Development Index (HDI)</td>\n",
       "      <td>0.740151</td>\n",
       "      <td>2009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>312</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>Human Development Index (HDI)</td>\n",
       "      <td>0.737748</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>Human Development Index (HDI)</td>\n",
       "      <td>0.732687</td>\n",
       "      <td>2007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>328</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>Human Development Index (HDI)</td>\n",
       "      <td>0.730279</td>\n",
       "      <td>2006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>360</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>Human Development Index (HDI)</td>\n",
       "      <td>0.726518</td>\n",
       "      <td>2005</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              country_name  human_indicator_code  \\\n",
       "17   Saint Kitts and Nevis                137506   \n",
       "47   Saint Kitts and Nevis                137506   \n",
       "81   Saint Kitts and Nevis                137506   \n",
       "120  Saint Kitts and Nevis                137506   \n",
       "161  Saint Kitts and Nevis                137506   \n",
       "204  Saint Kitts and Nevis                137506   \n",
       "245  Saint Kitts and Nevis                137506   \n",
       "285  Saint Kitts and Nevis                137506   \n",
       "304  Saint Kitts and Nevis                137506   \n",
       "312  Saint Kitts and Nevis                137506   \n",
       "320  Saint Kitts and Nevis                137506   \n",
       "328  Saint Kitts and Nevis                137506   \n",
       "360  Saint Kitts and Nevis                137506   \n",
       "\n",
       "              human_indicator_name  human_indicator_value  year  \n",
       "17   Human Development Index (HDI)               0.777845  2017  \n",
       "47   Human Development Index (HDI)               0.774242  2016  \n",
       "81   Human Development Index (HDI)               0.772708  2015  \n",
       "120  Human Development Index (HDI)               0.770395  2014  \n",
       "161  Human Development Index (HDI)               0.763297  2013  \n",
       "204  Human Development Index (HDI)               0.755679  2012  \n",
       "245  Human Development Index (HDI)               0.750983  2011  \n",
       "285  Human Development Index (HDI)               0.745055  2010  \n",
       "304  Human Development Index (HDI)               0.740151  2009  \n",
       "312  Human Development Index (HDI)               0.737748  2008  \n",
       "320  Human Development Index (HDI)               0.732687  2007  \n",
       "328  Human Development Index (HDI)               0.730279  2006  \n",
       "360  Human Development Index (HDI)               0.726518  2005  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(human_indicators2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e082b511",
   "metadata": {},
   "source": [
    "All looks as is expected\n",
    "\n",
    "Check the values of the specific column .\n",
    "\n",
    "my intentioon is to do a multiple \n",
    "\n",
    "Using the 'value_counts' method check for the values. The 'value_counts' methods returns a series that contains the unique values of the column, along with the count of each value.\n",
    "\n",
    "Checking the values of the columns is an important step in data preparation for multiple regression analysis because:\n",
    "\n",
    "\n",
    "* Missing values: If there are missing values in the columns, they can impact the accuracy and results of the regression analysis. Check for missing values using the .isna() method.\n",
    "\n",
    "* Outliers: Outliers can also have a significant impact on the results of the regression analysis. Check for outliers using various visualization methods such as a box plot, scatter plot, or histogram\n",
    "*\n",
    "Data type: Make sure that the data type of each column is appropriate for the analussi to be conducted. For example, categorical variables should be converted to numeric data types.\n",
    "\n",
    "*Data distribution: Checking the values of the columns can also helps to understand the distribution of the data, which can impact the results of the regression analysis. For example, if the data is not normally distributed, it may need to be transformed to achieve a normal distribution\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "046700ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "value_counts= human_indicators2[\"human_indicator_name\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "6491ccb0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Human Development Index (HDI)    13\n",
      "Name: human_indicator_name, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(value_counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69ab7c5c",
   "metadata": {},
   "source": [
    "Take a look at the data in varoius  ways to esnure it is appropraite for the analyssi to be perfomed.\n",
    "\n",
    "For this part of the project  a multiple regressioin analysis is intended.\n",
    "\n",
    "The following is to observe the data and to ensure it is ready for multiple regression. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "cb3858b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 13 entries, 17 to 360\n",
      "Data columns (total 5 columns):\n",
      " #   Column                 Non-Null Count  Dtype  \n",
      "---  ------                 --------------  -----  \n",
      " 0   country_name           13 non-null     object \n",
      " 1   human_indicator_code   13 non-null     int64  \n",
      " 2   human_indicator_name   13 non-null     object \n",
      " 3   human_indicator_value  13 non-null     float64\n",
      " 4   year                   13 non-null     int64  \n",
      "dtypes: float64(1), int64(2), object(2)\n",
      "memory usage: 624.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "human_indicators2.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6c68494",
   "metadata": {},
   "source": [
    "Check the shape of the dataframe\n",
    "\n",
    "This returns a tuple with the number of rows and cloumns in the dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "e659325c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(13, 5)\n"
     ]
    }
   ],
   "source": [
    "print(human_indicators2.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b1c50ed",
   "metadata": {},
   "source": [
    "Summary Statitistics\n",
    "\n",
    "To get summary statitstics use 'describe()' method. This will return the count, mean, standard deviation, minimun, 25th percentile, median (50th percentile). 75th percentile, and maximun column in the dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "b7def0fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       human_indicator_code  human_indicator_value        year\n",
      "count                  13.0              13.000000    13.00000\n",
      "mean               137506.0               0.752122  2011.00000\n",
      "std                     0.0               0.018161     3.89444\n",
      "min                137506.0               0.726518  2005.00000\n",
      "25%                137506.0               0.737748  2008.00000\n",
      "50%                137506.0               0.750983  2011.00000\n",
      "75%                137506.0               0.770395  2014.00000\n",
      "max                137506.0               0.777845  2017.00000\n"
     ]
    }
   ],
   "source": [
    "print(human_indicators2.describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d1ae7be",
   "metadata": {},
   "source": [
    "It returns data only for those columns that are numerical which indicate the need to convert the categorical columns to numerical.\n",
    "\n",
    "Check for categorical or numeric Data\n",
    "\n",
    "Use 'dtypes' attibute to checkfor categorical data. It retruns the data type for each column in the dataframe. Categorical data will have the data type 'category'.\n",
    "\n",
    "Find the data type of each column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "2268eefc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "country_name              object\n",
       "human_indicator_code       int64\n",
       "human_indicator_name      object\n",
       "human_indicator_value    float64\n",
       "year                       int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "human_indicators2.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82c61c5c",
   "metadata": {},
   "source": [
    "Two columns show up as categorical.\n",
    "\n",
    "Find the categorical columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "68e5d34d",
   "metadata": {},
   "outputs": [],
   "source": [
    "categorical_columns = human_indicators2.select_dtypes(include=['object']).columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "c0451adb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['country_name', 'human_indicator_name'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(categorical_columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "973e5196",
   "metadata": {},
   "source": [
    "It shows that 'country_name' and 'human_indicator_name' columns are categorical.\n",
    "\n",
    "Change categorical data to numeric. \n",
    "\n",
    "First, "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ffeb332",
   "metadata": {},
   "source": [
    "Replace Specific values in a column\n",
    "\n",
    "Rename the rows under the column human_indicator_name so that the row names do not have objects such as % in them. Modify the column human_indicator_name and replace the old row names in that column with new names. The 'inplace=True' argument tells the 'replace' method to modify the dataframe in place, so I do not need to assign the result to a new dataframe.\n",
    "\n",
    "This will replace all instances of the old values in the specified column with the new values, without splitting the column into multiple columns. This can be useful way to clean and standardize values in a column without changing the structure of the dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "0630b9c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\admin\\AppData\\Local\\Temp\\ipykernel_9280\\3651159373.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  human_indicators2 [\"human_indicator_name\"].replace({\"Human Development Index (HDI)\":\"human_development_index\"}, inplace=True)\n"
     ]
    }
   ],
   "source": [
    "human_indicators2 [\"human_indicator_name\"].replace({\"Human Development Index (HDI)\":\"human_development_index\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9414e9bb",
   "metadata": {},
   "source": [
    "Always check your data to make sure your code was successful"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "334c5eb8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country_name</th>\n",
       "      <th>human_indicator_code</th>\n",
       "      <th>human_indicator_name</th>\n",
       "      <th>human_indicator_value</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.777845</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.774242</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.772708</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.770395</td>\n",
       "      <td>2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.763297</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.755679</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>245</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.750983</td>\n",
       "      <td>2011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>285</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.745055</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>304</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.740151</td>\n",
       "      <td>2009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>312</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.737748</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.732687</td>\n",
       "      <td>2007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>328</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.730279</td>\n",
       "      <td>2006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>360</th>\n",
       "      <td>Saint Kitts and Nevis</td>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.726518</td>\n",
       "      <td>2005</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              country_name  human_indicator_code     human_indicator_name  \\\n",
       "17   Saint Kitts and Nevis                137506  human_development_index   \n",
       "47   Saint Kitts and Nevis                137506  human_development_index   \n",
       "81   Saint Kitts and Nevis                137506  human_development_index   \n",
       "120  Saint Kitts and Nevis                137506  human_development_index   \n",
       "161  Saint Kitts and Nevis                137506  human_development_index   \n",
       "204  Saint Kitts and Nevis                137506  human_development_index   \n",
       "245  Saint Kitts and Nevis                137506  human_development_index   \n",
       "285  Saint Kitts and Nevis                137506  human_development_index   \n",
       "304  Saint Kitts and Nevis                137506  human_development_index   \n",
       "312  Saint Kitts and Nevis                137506  human_development_index   \n",
       "320  Saint Kitts and Nevis                137506  human_development_index   \n",
       "328  Saint Kitts and Nevis                137506  human_development_index   \n",
       "360  Saint Kitts and Nevis                137506  human_development_index   \n",
       "\n",
       "     human_indicator_value  year  \n",
       "17                0.777845  2017  \n",
       "47                0.774242  2016  \n",
       "81                0.772708  2015  \n",
       "120               0.770395  2014  \n",
       "161               0.763297  2013  \n",
       "204               0.755679  2012  \n",
       "245               0.750983  2011  \n",
       "285               0.745055  2010  \n",
       "304               0.740151  2009  \n",
       "312               0.737748  2008  \n",
       "320               0.732687  2007  \n",
       "328               0.730279  2006  \n",
       "360               0.726518  2005  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(human_indicators2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59df34b3",
   "metadata": {},
   "source": [
    "drop country_name column since it is only one country referred to"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "46966fa4",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\admin\\AppData\\Local\\Temp\\ipykernel_9280\\2510790435.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  human_indicators2.drop(columns=[\"country_name\"], axis=1, inplace=True)\n"
     ]
    }
   ],
   "source": [
    "human_indicators2.drop(columns=[\"country_name\"], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "f951a4f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>human_indicator_code</th>\n",
       "      <th>human_indicator_name</th>\n",
       "      <th>human_indicator_value</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.777845</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.774242</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.772708</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.770395</td>\n",
       "      <td>2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.763297</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204</th>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.755679</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>245</th>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.750983</td>\n",
       "      <td>2011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>285</th>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.745055</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>304</th>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.740151</td>\n",
       "      <td>2009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>312</th>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.737748</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320</th>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.732687</td>\n",
       "      <td>2007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>328</th>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.730279</td>\n",
       "      <td>2006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>360</th>\n",
       "      <td>137506</td>\n",
       "      <td>human_development_index</td>\n",
       "      <td>0.726518</td>\n",
       "      <td>2005</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     human_indicator_code     human_indicator_name  human_indicator_value  \\\n",
       "17                 137506  human_development_index               0.777845   \n",
       "47                 137506  human_development_index               0.774242   \n",
       "81                 137506  human_development_index               0.772708   \n",
       "120                137506  human_development_index               0.770395   \n",
       "161                137506  human_development_index               0.763297   \n",
       "204                137506  human_development_index               0.755679   \n",
       "245                137506  human_development_index               0.750983   \n",
       "285                137506  human_development_index               0.745055   \n",
       "304                137506  human_development_index               0.740151   \n",
       "312                137506  human_development_index               0.737748   \n",
       "320                137506  human_development_index               0.732687   \n",
       "328                137506  human_development_index               0.730279   \n",
       "360                137506  human_development_index               0.726518   \n",
       "\n",
       "     year  \n",
       "17   2017  \n",
       "47   2016  \n",
       "81   2015  \n",
       "120  2014  \n",
       "161  2013  \n",
       "204  2012  \n",
       "245  2011  \n",
       "285  2010  \n",
       "304  2009  \n",
       "312  2008  \n",
       "320  2007  \n",
       "328  2006  \n",
       "360  2005  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(human_indicators2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cd47ead",
   "metadata": {},
   "source": [
    "Changing Categorical values to Numerical  Values\n",
    "\n",
    "use 'map' to assign specific numerical values to each variable in a column. The 'map()' method takes a dictionary as an argument, where the keys are the variables in the column and the values are the numerical values to be assigned to each varaible. after running the code the varaibles in the specified column will be replaced with the corresponding numerical values.\n",
    "\n",
    "The 'map' method is important in multiple linear regression because it allows you to map specific values in the dataset to new values that are more suyitable for analyssi. the text values are not suitable for us ein regression analysis. by using'map' method they are converted to numerical values that can be used in regression nalyssi, presenting the relationships between the values andd allowing more meaningful analysis. this converstion from categorical to numerical also helps reduce potential biases and inaccuarcies that can occur when working with text data. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "bd663d6d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\admin\\AppData\\Local\\Temp\\ipykernel_9280\\2385625938.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  human_indicators2['human_indicator_name'] = human_indicators2['human_indicator_name'].map({'human_development_index':1})\n"
     ]
    }
   ],
   "source": [
    "human_indicators2['human_indicator_name'] = human_indicators2['human_indicator_name'].map({'human_development_index':1})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4257430",
   "metadata": {},
   "source": [
    "Examine the data to ensure the code was successful"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "7b0b85c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>human_indicator_code</th>\n",
       "      <th>human_indicator_name</th>\n",
       "      <th>human_indicator_value</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.777845</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.774242</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.772708</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.770395</td>\n",
       "      <td>2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.763297</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.755679</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>245</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.750983</td>\n",
       "      <td>2011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>285</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.745055</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>304</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.740151</td>\n",
       "      <td>2009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>312</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.737748</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.732687</td>\n",
       "      <td>2007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>328</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.730279</td>\n",
       "      <td>2006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>360</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.726518</td>\n",
       "      <td>2005</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     human_indicator_code  human_indicator_name  human_indicator_value  year\n",
       "17                 137506                     1               0.777845  2017\n",
       "47                 137506                     1               0.774242  2016\n",
       "81                 137506                     1               0.772708  2015\n",
       "120                137506                     1               0.770395  2014\n",
       "161                137506                     1               0.763297  2013\n",
       "204                137506                     1               0.755679  2012\n",
       "245                137506                     1               0.750983  2011\n",
       "285                137506                     1               0.745055  2010\n",
       "304                137506                     1               0.740151  2009\n",
       "312                137506                     1               0.737748  2008\n",
       "320                137506                     1               0.732687  2007\n",
       "328                137506                     1               0.730279  2006\n",
       "360                137506                     1               0.726518  2005"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(human_indicators2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c6838f9",
   "metadata": {},
   "source": [
    "Identify columns with strings using 'dtypes' attribute, which returns the data type of each column. Filter the columns with string data type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "b17a9ed1",
   "metadata": {},
   "outputs": [],
   "source": [
    "string_cols = human_indicators2.select_dtypes(include=['object']).columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "b05a4505",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([], dtype='object')"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display (string_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "b2116584",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "human_indicator_code       int64\n",
      "human_indicator_name       int64\n",
      "human_indicator_value    float64\n",
      "year                       int64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print (human_indicators2.dtypes)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fccfe1c",
   "metadata": {},
   "source": [
    "Reset The index\n",
    "\n",
    "This makes it easy to manipulate the dataframe and help eliminate index-related errors or issues that may arise during analysis. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "3b2426c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>human_indicator_code</th>\n",
       "      <th>human_indicator_name</th>\n",
       "      <th>human_indicator_value</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.777845</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.774242</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.772708</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.770395</td>\n",
       "      <td>2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.763297</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.755679</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.750983</td>\n",
       "      <td>2011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.745055</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.740151</td>\n",
       "      <td>2009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.737748</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.732687</td>\n",
       "      <td>2007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.730279</td>\n",
       "      <td>2006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>137506</td>\n",
       "      <td>1</td>\n",
       "      <td>0.726518</td>\n",
       "      <td>2005</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    human_indicator_code  human_indicator_name  human_indicator_value  year\n",
       "0                 137506                     1               0.777845  2017\n",
       "1                 137506                     1               0.774242  2016\n",
       "2                 137506                     1               0.772708  2015\n",
       "3                 137506                     1               0.770395  2014\n",
       "4                 137506                     1               0.763297  2013\n",
       "5                 137506                     1               0.755679  2012\n",
       "6                 137506                     1               0.750983  2011\n",
       "7                 137506                     1               0.745055  2010\n",
       "8                 137506                     1               0.740151  2009\n",
       "9                 137506                     1               0.737748  2008\n",
       "10                137506                     1               0.732687  2007\n",
       "11                137506                     1               0.730279  2006\n",
       "12                137506                     1               0.726518  2005"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "human_indicators2.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31d213b6",
   "metadata": {},
   "source": [
    "Checking for outliers\n",
    "\n",
    "Human Indicator Name:\n",
    "\n",
    "'human_development_index':1\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e308ab3a",
   "metadata": {},
   "source": [
    "Create a Scatter plot.\n",
    "\n",
    "This allows the visualization of the relationship between 2 variables, including the distribution of outliers. Outliers will be easily identifiable. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "765af292",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(human_indicators2['year'], human_indicators2['human_indicator_name'])\n",
    "plt.xlabel('year')\n",
    "plt.ylabel('human_indicator_name')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7378f42",
   "metadata": {},
   "source": [
    "The scatter plot provides some preliminary insights into the distribution of the variables and potential outliers in the data, however, because the scatterplot shows each varaiable and teh row of index only and does not show the relationship between multiple varaibles, they are not to be used to draw definitive conclusions pertaining to the relationships between the varibles and human development in Saint Kitts and Nevis. More exploration and Analysis needs to be done first."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8431d18a",
   "metadata": {},
   "source": [
    "Check for linearity\n",
    "\n",
    "Checking for linearity is important because simple linear regression assumes that there is a linear relationship between the independent variable (time) and the dependent variable (human development index). If the relationship between the two variables is non-linear, the results of the regression analysis may not be meaningful or accurate.\n",
    "\n",
    "In general, if the relationship between the variables is non-linear, it may be necessary to transform one or both of the variables to make the relationship linear. This could involve transforming the variables using techniques such as logarithmic transformation or polynomial transformation.\n",
    "\n",
    "Checking for linearity is an important step in the regression analysis process, as it helps ensure that the results of the analysis are meaningful and accurate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "29453126",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(human_indicators2['year'], human_indicators2['human_indicator_name'])\n",
    "plt.xlabel('year')\n",
    "plt.ylabel('human_indicator_name')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50e52911",
   "metadata": {},
   "outputs": [],
   "source": [
    "There is a straight line showing a strong linear relationship. Hwoever conclusions cannot be made yet to answer the question of what is the overall trend in human development for Saint. Kitts and Nevis and more exploration and anlysis will  need to be conducted. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
